package models

import (
	"context"
	"encoding/json"
	"github.com/stretchr/testify/assert"
	"go.mongodb.org/mongo-driver/v2/bson"
	"go.mongodb.org/mongo-driver/v2/mongo"
	"go.mongodb.org/mongo-driver/v2/mongo/options"
	"testing"
	"time"
)

func TestUser(t *testing.T) {

	user := User{
		UserName:     "TestUser",
		UserAddress:  "123 Test St",
		Email:        "test@example.com",
		PasswordHash: "",
		SavedRecipes: nil,
		Role:         "user",
		CreatedAt:    time.Now(),
	}

	// Test JSON marshaling
	jsonData, err := json.Marshal(user)
	assert.NoError(t, err)
	t.Log(string(jsonData))

	// Test JSON unmarshaling
	var unmarshaledUserJSON User
	err = json.Unmarshal(jsonData, &unmarshaledUserJSON)
	assert.NoError(t, err)

	// Verify fields were preserved (except omitempty fields that might be empty)
	assert.Equal(t, user.UserName, unmarshaledUserJSON.UserName)
	assert.Equal(t, user.Email, unmarshaledUserJSON.Email)

	// Test BSON marshaling
	bsonData, err := bson.Marshal(user)
	assert.NoError(t, err)

	// Test BSON unmarshaling
	var unmarshaledUserBSON User
	err = bson.Unmarshal(bsonData, &unmarshaledUserBSON)
	assert.NoError(t, err)

	// Verify fields were preserved
	assert.Equal(t, user.UserName, unmarshaledUserBSON.UserName)
	assert.Equal(t, user.Email, unmarshaledUserBSON.Email)
}

func TestUserOmitEmpty(t *testing.T) {
	// User with empty ID and no saved recipes
	user := User{
		UserName:     "TestUser",
		UserAddress:  "123 Test St",
		Email:        "test@example.com",
		PasswordHash: "",  // Empty to test omitempty
		SavedRecipes: nil, // Empty to test omitempty behavior
		Role:         "user",
		CreatedAt:    time.Now(),
	}

	// Marshal to JSON
	jsonData, err := json.Marshal(user)
	assert.NoError(t, err)

	// Convert to string for easier checking
	jsonStr := string(jsonData)

	// Check that password_hash field is not present
	assert.NotContains(t, jsonStr, "password_hash")

	// Marshal to a map to check which fields exist
	var jsonMap map[string]any
	err = json.Unmarshal(jsonData, &jsonMap)
	assert.NoError(t, err)

	// Check that password_hash field is omitted
	_, hasPasswordHash := jsonMap["password_hash"]
	assert.False(t, hasPasswordHash, "password_hash field should be omitted when empty")
}

func TestIDGeneration(t *testing.T) {
	// This test requires a MongoDB connection
	// Initialize your MongoDB client here

	// Create a user without an ID
	user := User{
		UserName:     "TestUser",
		UserAddress:  "123 Test St",
		Email:        "test@example.com",
		PasswordHash: "hashedpassword",
		SavedRecipes: []bson.ObjectID{},
		Role:         "user",
		CreatedAt:    time.Now(),
	}

	client, err := mongo.Connect(options.Client().ApplyURI(c))
	if err != nil {
		panic(err)
	}
	// Insert into MongoDB
	collection := client.Database("testdb").Collection("users")
	result, err := collection.InsertOne(context.Background(), user)
	assert.NoError(t, err)

	// Check that an ID was generated
	assert.NotNil(t, result.InsertedID)

	// Retrieve the user and verify ID exists
	var retrievedUser User
	err = collection.FindOne(context.Background(), bson.M{"email": user.Email}).Decode(&retrievedUser)
	assert.NoError(t, err)
	assert.NotEqual(t, bson.ObjectID{}, retrievedUser.ID, "ID should be generated by MongoDB")
}
